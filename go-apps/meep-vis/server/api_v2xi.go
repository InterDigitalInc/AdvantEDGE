/*
 * Copyright (c) 2022  The AdvantEDGE Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * AdvantEDGE V2X Information Service REST API
 *
 * V2X Information Service is AdvantEDGE's implementation of [ETSI MEC ISG MEC030 V2XI API](http://www.etsi.org/deliver/etsi_gs/MEC/001_099/030/02.02.01_60/gs_MEC030v020201p.pdf) <p>[Copyright (c) ETSI 2017](https://forge.etsi.org/etsi-forge-copyright-notice.txt) <p>**Micro-service**<br>[meep-vis](https://github.com/InterDigitalInc/AdvantEDGE/tree/master/go-apps/meep-vis) <p>**Type & Usage**<br>Edge Service used by edge applications that want to get information about radio conditions in the network <p>**Note**<br>AdvantEDGE supports a selected subset of RNI API endpoints (see below) and a subset of subscription types.
 *
 * API version: 2.2.1
 * Contact: AdvantEDGE@InterDigital.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package server

import (
	"net/http"
)

func Mec011AppTerminationPOST(w http.ResponseWriter, r *http.Request) {
	mec011AppTerminationPost(w, r)
}

func PredictedQosPOST(w http.ResponseWriter, r *http.Request) {
	predictedQosPost(w, r)
}

func SubPOST(w http.ResponseWriter, r *http.Request) {
	subscriptionsPost(w, r)
}

func IndividualSubscriptionDELETE(w http.ResponseWriter, r *http.Request) {
	individualSubscriptionDelete(w, r)
}

func IndividualSubscriptionGET(w http.ResponseWriter, r *http.Request) {
	individualSubscriptionGET(w, r)
}

func IndividualSubscriptionPUT(w http.ResponseWriter, r *http.Request) {
	individualSubscriptionPut(w, r)
}

func ProvInfoUuUnicastGET(w http.ResponseWriter, r *http.Request) {
	provInfoUuUnicastGET(w, r)
}

func SubGET(w http.ResponseWriter, r *http.Request) {
	subscriptionsGET(w, r)
}

func V2xMessagePOST(w http.ResponseWriter, r *http.Request) {
	V2xMsgPublicationPOST(w, r)
}
